version: "3.9"

services:
  db:
    build:
      context: ./docker/postgres
    container_name: rota-postgres
    environment:
      POSTGRES_DB: rota-db
      POSTGRES_USER: rota-user
      POSTGRES_PASSWORD: rota_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8 --data-checksums"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./app/scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - backend

  redis:
    build:
      context: ./docker/redis
    container_name: rota-redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - backend

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: rota-api
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      ENV: production
      API_ORIGIN: https://app.seudominio.com.br
      CORS_ALLOWED_ORIGINS: https://app.seudominio.com.br
      DB_ENGINE: postgresql+psycopg
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: rota-db
      DB_USER: rota-user
      DB_PASS: rota_password_123
      DB_POOL_SIZE: 12
      DB_MAX_OVERFLOW: 6
      DB_POOL_TIMEOUT: 30
      DB_POOL_RECYCLE: 1800
      JWT_SECRET: b9178db8999f0fd224c7e97acb9e7d2e
      CSRF_SECRET: 5f6c6ed1a9d44716a198ce7a810cdc2d
      REDIS_URL: redis://redis:6379/0
      AUTH_RATE_LIMIT_WINDOW_SECONDS: 60
      AUTH_RATE_LIMIT_MAX_ATTEMPTS: 5
      UVICORN_WORKERS: 4
      UVICORN_KEEP_ALIVE: 5
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - backend

  proxy:
    build:
      context: ./docker/proxy
    container_name: rota-proxy
    depends_on:
      api:
        condition: service_started
    volumes:
      - ./docker/proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./frontend_dist:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    networks:
      - backend

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local

networks:
  backend:
    driver: bridge
